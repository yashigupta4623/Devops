✅ Docker Installation
- Command 1

```bash
xcode-select --install
```

-- `xcode-select`: A tool that manages different versions of Xcode and its command-line tools.
-- `--install`: Tells macOS to install the missing Command Line Tools.
-- ✅ Use: It installs compilers, `git`, `make`, etc., which are required for development and using tools like Homebrew.

---

 - Command 2

```bash
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
```

-- `/bin/bash`: Runs the Bash shell.
-- `-c`: Says "run the command that follows as a string."
-- `curl -fsSL <url>`:

  -- `curl`: Downloads files from the internet.
  -- `-f`: Fail silently on HTTP errors.
  -- `-s`: Silent (no progress bar).
  -- `-S`: Shows errors if they happen.
  -- `-L`: Follows redirects.
-- ✅ Use: This command downloads and runs the Homebrew install script directly using bash.

---

 - Command 3

```bash
echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
```

-- `echo '...'`: Prints the text inside quotes.
-- `>> ~/.zprofile`: Appends the text to your terminal config file (`~/.zprofile`), which runs every time you open a new terminal on macOS (zsh shell).
-- Inside the quotes:

  ```bash
  eval "$(/opt/homebrew/bin/brew shellenv)"
  ```

  Let’s break this:

  -- `/opt/homebrew/bin/brew shellenv`: This command prints environment variables needed for Homebrew to work (like PATH).
  -- `$()`: Runs the command inside and returns the result.
  -- `eval`: Takes a string and executes it as a command.

    -- Example: If output is `export PATH=/opt/homebrew/bin:$PATH`, then `eval` runs that `export` command.
-- ✅ Use: Ensures your terminal knows where Homebrew is and can run `brew` commands.

---

 - Command 4

```bash
brew install --cask docker
```

-- `brew install`: Tells Homebrew to install something.
-- `--cask`: Used for installing macOS GUI apps (like Docker Desktop).
-- `docker`: The package name to install.
-- ✅ Use: Installs the full Docker Desktop app with GUI and Docker CLI.

---

 - Command 5

```bash
docker --version
```

-- `docker`: The command-line interface to Docker.
-- `--version`: Asks Docker to display its installed version.
-- ✅ Use: Confirms Docker is installed and working.

---

✅ Jenkins Setup Commands (Detailed Breakdown)

 - Command 6

```bash
docker pull jenkins/jenkins:lts
```

-- `docker pull`: Downloads a Docker image from Docker Hub.
-- `jenkins/jenkins:lts`:

  -- `jenkins/jenkins`: The repository and image name.
  -- `:lts`: Long-Term Support version tag.
-- ✅ Use: Gets the Jenkins image ready to be run locally.

---

 - Command 7

```bash
docker run -d --name jenkins \
  -p 8080:8080 -p 50000:50000 \
  -v jenkins_home:/var/jenkins_home \
  jenkins/jenkins:lts
```

-- `docker run`: Starts a new Docker container.
-- `-d`: Detached mode (runs in the background).
-- `--name jenkins`: Names the container "jenkins".
-- `-p 8080:8080`: Maps host port 8080 to container port 8080 (Jenkins UI).
-- `-p 50000:50000`: Maps for Jenkins agent communication.
-- `-v jenkins_home:/var/jenkins_home`:

  -- Creates a named volume (`jenkins_home`) on the host.
  -- Mounts it to `/var/jenkins_home` inside the container (where Jenkins stores data).
-- `jenkins/jenkins:lts`: The Docker image to use.
-- ✅ Use: Starts Jenkins container with UI access and persistent storage.

---

 - Command 8

```bash
docker exec -it jenkins cat /var/jenkins_home/secrets/initialAdminPassword
```

-- `docker exec`: Runs a command inside a running container.
-- `-it`: Interactive terminal (lets you see output and interact).
-- `jenkins`: The name of the container.
-- `cat /var/jenkins_home/secrets/initialAdminPassword`:

  -- `cat`: Prints the file's contents.
  -- The file contains the initial admin password.
-- ✅ Use: Needed to log in to Jenkins the first time.

---

 - Command 9

```bash
docker ps
```

-- `docker ps`: Lists all running Docker containers.
-- ✅ Use: Confirms Jenkins is up and running (shows container ID, ports, name, etc.).

---

 - Command 10

```text
http://localhost:8080
```

-- `localhost`: Refers to your own machine.
-- `:8080`: Accesses port 8080 where Jenkins is running.
-- ✅ Use: Opens Jenkins web interface to complete setup.

---

If you want, I can turn this into a PDF or cheatsheet too. Let me know!
